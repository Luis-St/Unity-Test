#pragma kernel CSMain

RWTexture2D<float4> Result;
float Width;
float Height;
float2 Size;

bool isWithinTriangle(const float2 pos, float2 center, const float size);

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	if (0 > Size.x || 0 > Size.y) {
		return;
	}
	
	const float2 pos = float2(id.x, id.y);
	const float2 center = float2(Width / 2, Height / 2);
	const float size = ((abs(Size.x - Size.y) / 2) + min(Size.x, Size.y))/* / 2*/;
	
	if (isWithinTriangle(pos, center, size)) {
		Result[id.xy] = float4(1.0, 1.0, 1.0, 1.0);
	} else {
		Result[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
	}
}

bool isWithinTriangle(const float2 pos, float2 center, const float size) {
	const float sqrt3 = sqrt(3.0) * 0.5;
	center.y -= Size.y * 0.06;
	float2 v1 = float2(center.x, center.y + size);
	float2 v2 = float2(center.x - size * 0.5, center.y - size * sqrt3);
	float2 v3 = float2(center.x + size * 0.5, center.y - size * sqrt3);
	
	const float d = (v2.y - v3.y) * (v1.x - v3.x) + (v3.x - v2.x) * (v1.y - v3.y);
	const float alpha = ((v2.y - v3.y) * (pos.x - v3.x) + (v3.x - v2.x) * (pos.y - v3.y)) / d;
	const float beta = ((v3.y - v1.y) * (pos.x - v3.x) + (v1.x - v3.x) * (pos.y - v3.y)) / d;
	
	const float gamma = 1.0 - alpha - beta;
	return alpha > 0 && beta > 0 && gamma > 0;
}
